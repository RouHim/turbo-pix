# # # # # # # # # # # # # # # # # # # #
# FFmpeg Downloader
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
FROM alpine:latest AS ffmpeg-downloader

ARG TARGETARCH

# Download and extract static ffmpeg build for the target architecture
RUN apk add --no-cache curl tar xz && \
    if [ "$TARGETARCH" = "arm64" ]; then \
        FFMPEG_ARCH="arm64"; \
    else \
        FFMPEG_ARCH="amd64"; \
    fi && \
    curl -L -o ffmpeg-release.tar.xz https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-${FFMPEG_ARCH}-static.tar.xz && \
    tar xf ffmpeg-release.tar.xz && \
    mv ffmpeg-*-${FFMPEG_ARCH}-static/ffmpeg /ffmpeg && \
    mv ffmpeg-*-${FFMPEG_ARCH}-static/ffprobe /ffprobe && \
    chmod +x /ffmpeg /ffprobe && \
    rm -rf ffmpeg-* ffmpeg-release.tar.xz

# # # # # # # # # # # # # # # # # # # #
# Application Builder
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
ARG TARGETARCH
# Map Docker TARGETARCH to Rust architecture naming
# TARGETARCH values: amd64, arm64
# Rust cross image names: x86_64-musl, aarch64-musl
FROM docker.io/messense/rust-musl-cross:x86_64-musl AS builder-amd64
FROM docker.io/messense/rust-musl-cross:aarch64-musl AS builder-arm64
FROM builder-${TARGETARCH:-amd64} AS builder

# Set working directory and create empty directory in one layer
WORKDIR /app
RUN mkdir "/empty_dir"

# Copy source code
COPY ../Cargo.toml ./
COPY ../Cargo.lock ./
COPY ../src ./src
COPY ../static ./static

# Determine the Rust target triple based on architecture
ARG TARGETARCH
RUN if [ "$TARGETARCH" = "arm64" ]; then \
        echo "aarch64-unknown-linux-musl" > /tmp/rust-target; \
    else \
        echo "x86_64-unknown-linux-musl" > /tmp/rust-target; \
    fi

# Build application with musl compatibility
# Pre-fetch dependencies and patch sqlite-vec for musl (https://github.com/asg017/sqlite-vec/pull/199)
RUN RUST_TARGET=$(cat /tmp/rust-target) && \
    cargo fetch --target ${RUST_TARGET} && \
    find /root/.cargo/registry/src -name "sqlite-vec.c" -exec sed -i '/^typedef u_int8_t uint8_t;$/d; /^typedef u_int16_t uint16_t;$/d; /^typedef u_int64_t uint64_t;$/d' {} \;

RUN RUST_TARGET=$(cat /tmp/rust-target) && \
    cargo build --profile production --target ${RUST_TARGET}

# # # # # # # # # # # # # # # # # # # #
# Run image
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
FROM scratch
ARG TARGETARCH

# Set environment variables in one layer
ENV USER="1000" \
    TURBO_PIX_PHOTO_PATHS="/photos" \
    TURBO_PIX_DATA_PATH="/data" \
    RUST_LOG="info" \
    FFMPEG_PATH="/ffmpeg" \
    FFPROBE_PATH="/ffprobe"

# For performance reasons write data to docker volume instead of containers writeable fs layer
VOLUME $TURBO_PIX_DATA_PATH

# Copy the empty directory as data and temp folder
COPY --chmod=777 --chown=$USER:$USER --from=builder /empty_dir $TURBO_PIX_DATA_PATH
COPY --chmod=777 --chown=$USER:$USER --from=builder /empty_dir /tmp

# Copy the built application directly from target directory
# Use shell to evaluate the architecture-specific path
COPY --chmod=755 --chown=$USER:$USER --from=builder /app/target/*/release/turbo-pix /turbo-pix

# Copy ffmpeg and ffprobe static binaries
COPY --chmod=755 --chown=$USER:$USER --from=ffmpeg-downloader /ffmpeg /ffmpeg
COPY --chmod=755 --chown=$USER:$USER --from=ffmpeg-downloader /ffprobe /ffprobe

EXPOSE 18473
USER $USER

ENTRYPOINT ["/turbo-pix"]