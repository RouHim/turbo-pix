name: CI/CD
on:
  push:
  pull_request:
    types:
      - opened
  workflow_dispatch: # allow manual execution

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'
          cache: 'npm'

      - name: Install npm dependencies
        run: npm ci

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check Rust format
        run: cargo fmt --all -- --check

      - name: Check frontend format
        run: npm run format:check

      - name: Run Rust linter
        run: cargo clippy -- -D warnings

      - name: Run frontend linters
        run: npm run lint

      - name: Download AI models
        run: cargo run -- --download-models

      - name: Run tests
        run: cargo test

      - name: Build release
        run: cargo build --release

  create-release:
    name: Create release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        if: github.ref == 'refs/heads/main'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        if: github.ref == 'refs/heads/main'
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        if: github.ref == 'refs/heads/main'
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/git \
            @semantic-release/changelog \
            @semantic-release/exec \
            @semantic-release/commit-analyzer \
            conventional-changelog-conventionalcommits

      - name: Generate Semantic Release Notes and Create Release
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  build-binaries:
    name: Build and upload release binaries
    needs: create-release
    if: github.ref == 'refs/heads/main'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: turbo-pix-x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            name: turbo-pix-aarch64-unknown-linux-musl

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl tools (Linux only)
        if: contains(matrix.target, 'linux-musl')
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Install cross-compilation tools (aarch64 Linux)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc

      - name: Rename binary with target name
        run: |
          cp target/${{ matrix.target }}/release/turbo-pix ${{ matrix.name }}

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Upload binary to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          files: ${{ matrix.name }}
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-container:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | podman login docker.io -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build amd64 image
        run: |
          podman build \
            --platform linux/amd64 \
            --build-arg TARGETARCH=amd64 \
            --manifest turbo-pix-manifest \
            -f container-data/Containerfile .

      - name: Build arm64 image
        run: |
          podman build \
            --platform linux/arm64 \
            --build-arg TARGETARCH=arm64 \
            --manifest turbo-pix-manifest \
            -f container-data/Containerfile .

      - name: Download AI models in container (amd64)
        run: |
          mkdir -p data
          # Test with the native amd64 image
          podman run --rm --user=0 -v $(pwd)/data:/data:z turbo-pix-manifest --download-models

      - name: Test container startup and health (amd64)
        run: |
          podman run -d --name turbo-pix-test -p 18473:18473 --user=0 -v $(pwd)/data:/data:z turbo-pix-manifest
          sleep 5
          echo "=== Container logs after 5s ==="
          podman logs turbo-pix-test
          echo "=== Testing health endpoint ==="
          if ! curl --retry 5 --retry-delay 2 --retry-all-errors http://localhost:18473/health; then
            echo "=== Health check failed, dumping full logs ==="
            podman logs turbo-pix-test
            podman stop turbo-pix-test
            podman rm turbo-pix-test
            exit 1
          fi
          podman stop turbo-pix-test
          podman rm turbo-pix-test

      - name: Push multi-arch manifest as latest
        run: |
          podman manifest push turbo-pix-manifest docker.io/rouhim/turbo-pix:latest
